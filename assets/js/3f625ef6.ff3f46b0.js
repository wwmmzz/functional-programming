"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[750],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5385:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={},i=void 0,c={unversionedId:"quiz-answers/magma-concat-closed",id:"quiz-answers/magma-concat-closed",title:"magma-concat-closed",description:"Question",source:"@site/docs/quiz-answers/magma-concat-closed.md",sourceDirName:"quiz-answers",slug:"/quiz-answers/magma-concat-closed",permalink:"/functional-programming/quiz-answers/magma-concat-closed",draft:!1,editUrl:"https://github.com/wwmmzz/functional-programming/blob/master/website/docs/quiz-answers/magma-concat-closed.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"javascript-includes",permalink:"/functional-programming/quiz-answers/javascript-includes"},next:{title:"option-semigroup-monoid-second",permalink:"/functional-programming/quiz-answers/option-semigroup-monoid-second"}},s={},l=[{value:"Question",id:"question",level:2},{value:"Answer",id:"answer",level:2}],p={toc:l},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"question"},"Question"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { Magma } from 'fp-ts/Magma'\n\nconst MagmaSub: Magma<number> = {\n  concat: (first, second) => first - second\n}\n")),(0,a.kt)("p",null,"The fact that ",(0,a.kt)("inlineCode",{parentName:"p"},"concat")," is a ",(0,a.kt)("em",{parentName:"p"},"closed")," operation isn't a trivial detail. If ",(0,a.kt)("inlineCode",{parentName:"p"},"A")," is the set of natural numbers (defined as positive integers) instead of the JavaScript number type (a set of positive and negative floats), could we define a ",(0,a.kt)("inlineCode",{parentName:"p"},"Magma<Natural>")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"concat")," implemented like in ",(0,a.kt)("inlineCode",{parentName:"p"},"MagmaSub"),"? Can you think of any other ",(0,a.kt)("inlineCode",{parentName:"p"},"concat")," operation on natural numbers for which the ",(0,a.kt)("inlineCode",{parentName:"p"},"closure")," property isn't valid?"),(0,a.kt)("h2",{id:"answer"},"Answer"),(0,a.kt)("p",null,"With natural numbers, the substraction operation cannot define a ",(0,a.kt)("inlineCode",{parentName:"p"},"Magma"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"a - b")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"b")," being greater than ",(0,a.kt)("inlineCode",{parentName:"p"},"a")," results in a negative number which is not a natural number."),(0,a.kt)("p",null,"Here are other examples of ",(0,a.kt)("inlineCode",{parentName:"p"},"concat")," operation on natural numbers for which the ",(0,a.kt)("inlineCode",{parentName:"p"},"closure")," property isn't valid:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"concat: (first, second) => first / second")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"concat: (first, second) => (first + second) / 2"))))}m.isMDXComponent=!0}}]);