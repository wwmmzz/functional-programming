"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[651],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(n),f=r,h=m["".concat(p,".").concat(f)]||m[f]||c[f]||o;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=f;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2047:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={slug:"/"},i="What is functional programming",l={unversionedId:"What is functional programming",id:"What is functional programming",title:"What is functional programming",description:"Functional Programming is programming with pure functions. Mathematical functions.",source:"@site/docs/1. What is functional programming.md",sourceDirName:".",slug:"/",permalink:"/functional-programming/",draft:!1,editUrl:"https://github.com/wwmmzz/functional-programming/blob/master/website/docs/1. What is functional programming.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/"},sidebar:"tutorialSidebar",next:{title:"The two pillars of functional programming",permalink:"/functional-programming/The two pillars of functional programming"}},p={},s=[],u={toc:s},m="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"what-is-functional-programming"},"What is functional programming"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Functional Programming is programming with pure functions. Mathematical functions.")),(0,r.kt)("p",null,"A quick search on the internet may lead you to the following definition:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"A (pure) function is a procedure that given the same input always return the same output without any observable side-effect.")),(0,r.kt)("p",null,'The term "side effect" does not yet have any specific meaning (we\'ll see in the future how to give a formal definition), what matters is to have some sort of intuition, think about opening a file or writing into a database.'),(0,r.kt)("p",null,"For the time being we can limit ourselves to say that a side effect is ",(0,r.kt)("em",{parentName:"p"},"anything")," a function does besides returning a value."),(0,r.kt)("p",null,"What is the structure of a program that uses exclusively pure functions?"),(0,r.kt)("p",null,"A functional program tends to be written like a ",(0,r.kt)("strong",{parentName:"p"},"pipeline"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const program = pipe(\n  input,\n  f1, // pure function\n  f2, // pure function\n  f3, // pure function\n  ...\n)\n")),(0,r.kt)("p",null,"What happens here is that ",(0,r.kt)("inlineCode",{parentName:"p"},"input")," is passed to the first function ",(0,r.kt)("inlineCode",{parentName:"p"},"f1"),", which returns a value that is passed to the second function ",(0,r.kt)("inlineCode",{parentName:"p"},"f2"),", which returns a value that is passed as an argument to the third function ",(0,r.kt)("inlineCode",{parentName:"p"},"f3"),", and so on."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Demo")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/wwmmzz/functional-programming/blob/master/src/00_pipe_and_flow.ts"},(0,r.kt)("inlineCode",{parentName:"a"},"00_pipe_and_flow.ts"))),(0,r.kt)("p",null,"We'll see how functional programming provides us with tools to structure our code in that style."),(0,r.kt)("p",null,"Other than understanding what functional programming ",(0,r.kt)("em",{parentName:"p"},"is"),", it is also essential to understand what is it's goal."),(0,r.kt)("p",null,"Functional programming's goal is to ",(0,r.kt)("strong",{parentName:"p"},"tame a system's complexity")," through the use of formal ",(0,r.kt)("em",{parentName:"p"},"models"),", and to give careful attention to ",(0,r.kt)("strong",{parentName:"p"},"code's properties")," and refactoring ease."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Functional programming will help teach people the mathematics behind program construction:"),(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"how to write composable code"),(0,r.kt)("li",{parentName:"ul"},"how to reason about side effects"),(0,r.kt)("li",{parentName:"ul"},"how to write consistent, general, less ad-hoc APIs"))),(0,r.kt)("p",null,"What does it mean to give careful attention to code's properties? Let's see with an example:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Why can we say that the ",(0,r.kt)("inlineCode",{parentName:"p"},"Array"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"map"),' method is "more functional" than a ',(0,r.kt)("inlineCode",{parentName:"p"},"for")," loop?"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// input\nconst xs: Array<number> = [1, 2, 3]\n\n// transformation\nconst double = (n: number): number => n * 2\n\n// result: I want an array where each `xs`' element is doubled\nconst ys: Array<number> = []\nfor (let i = 0; i <= xs.length; i++) {\n  ys.push(double(xs[i]))\n}\n")),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"for")," loop offers a lot of flexibility, I can modify:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the starting index, ",(0,r.kt)("inlineCode",{parentName:"li"},"let i = 0")),(0,r.kt)("li",{parentName:"ul"},"the looping condition, ",(0,r.kt)("inlineCode",{parentName:"li"},"i < xs.length")),(0,r.kt)("li",{parentName:"ul"},"the step change, ",(0,r.kt)("inlineCode",{parentName:"li"},"i++"),".")),(0,r.kt)("p",null,"This also implies that I may introduce ",(0,r.kt)("strong",{parentName:"p"},"errors")," and that I have no guarantees about the returned value."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Quiz"),". Is the ",(0,r.kt)("inlineCode",{parentName:"p"},"for loop")," correct?"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"See the ",(0,r.kt)("a",{parentName:"p",href:"/functional-programming/quiz-answers/for-loop"},"answer here"))),(0,r.kt)("p",null,"Let's rewrite the same exercise using ",(0,r.kt)("inlineCode",{parentName:"p"},"map"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// input\nconst xs: Array<number> = [1, 2, 3]\n\n// transformation\nconst double = (n: number): number => n * 2\n\n// result: I want an array where each `xs`' element is doubled\nconst ys: Array<number> = xs.map(double)\n")),(0,r.kt)("p",null,"We can note how ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," lacks the same flexibility of a ",(0,r.kt)("inlineCode",{parentName:"p"},"for loop"),", but it offers us some guarantees:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"all the elements of the input array will be processed"),(0,r.kt)("li",{parentName:"ul"},"the resulting array will always have the same number of elements as the starting one")),(0,r.kt)("p",null,"In functional programming, where there's an emphasis on code properties rather than implementation details, the ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," operation is interesting ",(0,r.kt)("strong",{parentName:"p"},"due to its limitations")),(0,r.kt)("p",null,"Think about how easier it is to review a PR that involves ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," rather than a ",(0,r.kt)("inlineCode",{parentName:"p"},"for")," loop."))}c.isMDXComponent=!0}}]);